{"version":3,"file":"legendValue.spec.js","names":["describe","test","legendValue","config","mockPieConfig","data","mockSdkDataResponse","fields","mockFields","expect","legend","toEqual","position","type","value","label_type","undefined","transformedConfig"],"sources":["../../../src/configTransformations/legendValue.spec.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { legendValue } from './legendValue'\nimport { mockPieConfig, mockFields, mockSdkDataResponse } from '../fixtures'\n\ndescribe('legendValue', () => {\n  test('default value', () => {\n    const { config } = legendValue({\n      config: { ...mockPieConfig },\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n\n    expect(config.legend).toEqual({\n      position: 'bottom',\n      type: 'legend',\n      value: 'label',\n    })\n  })\n\n  describe('config.label_type ===', () => {\n    test('lab', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'lab' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label')\n      }\n    })\n\n    test('labVal', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'labVal' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_value')\n      }\n    })\n\n    test('val', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'val' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('value')\n      }\n    })\n\n    test('per', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'per' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('percent')\n      }\n    })\n\n    test('labPer', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'labPer' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_percent')\n      }\n    })\n  })\n\n  describe('config.legend.value ===', () => {\n    test('\"label\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'label' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label')\n      }\n    })\n\n    test('\"value\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'value' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('value')\n      }\n    })\n\n    test('\"percent\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'percent' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('percent')\n      }\n    })\n\n    test('\"label_value\"', () => {\n      const config = {\n        ...mockPieConfig,\n        legend: { value: 'label_value' as const },\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_value')\n      }\n    })\n\n    test('\"label_percent\"', () => {\n      const config = {\n        ...mockPieConfig,\n        legend: { value: 'label_percent' as const },\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_percent')\n      }\n    })\n  })\n\n  test('config.legend === false', () => {\n    const config = { ...mockPieConfig, legend: false }\n    const { config: transformedConfig } = legendValue({\n      config,\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n    expect(transformedConfig.legend).toEqual(false)\n  })\n})\n"],"mappings":"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"}