{"version":3,"file":"normalizeChartTypes.spec.js","names":["normalizeChartTypes","mockFields","mockSdkDataResponse","describe","test","config","type","transformedConfig","data","fields","expect","toEqual","undefined"],"sources":["../../src/configTransformations/normalizeChartTypes.spec.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { normalizeChartTypes } from './normalizeChartTypes'\nimport { mockFields, mockSdkDataResponse } from '../fixtures'\n\ndescribe('normalizeChartTypes', () => {\n  describe('config.type ===', () => {\n    test('default', () => {\n      const config = { type: 'default' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('default')\n    })\n\n    test('area', () => {\n      const config = { type: 'area' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('area')\n    })\n\n    test('bar', () => {\n      const config = { type: 'bar' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('bar')\n    })\n\n    test('column', () => {\n      const config = { type: 'column' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('column')\n    })\n\n    test('line', () => {\n      const config = { type: 'line' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('line')\n    })\n\n    test('pie', () => {\n      const config = { type: 'pie' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('pie')\n    })\n\n    test('scatter', () => {\n      const config = { type: 'scatter' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('scatter')\n    })\n\n    test('sparkline', () => {\n      const config = { type: 'sparkline' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('sparkline')\n    })\n\n    test('table', () => {\n      const config = { type: 'table' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('table')\n    })\n\n    test('looker_area', () => {\n      const config = { type: 'looker_area' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('area')\n    })\n\n    test('looker_bar', () => {\n      const config = { type: 'looker_bar' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('bar')\n    })\n\n    test('looker_column', () => {\n      const config = { type: 'looker_column' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('column')\n    })\n\n    test('looker_line', () => {\n      const config = { type: 'looker_line' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('line')\n    })\n\n    test('looker_pie', () => {\n      const config = { type: 'looker_pie' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('pie')\n    })\n\n    test('looker_scatter', () => {\n      const config = { type: 'looker_scatter' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('scatter')\n    })\n\n    test('looker_grid', () => {\n      const config = { type: 'looker_grid' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('table')\n    })\n\n    test('undefined', () => {\n      const config = { type: (undefined as unknown) as 'default' }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('default')\n    })\n  })\n\n  test('config.type is an unknown type', () => {\n    const config = { type: 'gouda-cheese-chart' as 'default' }\n    const { config: transformedConfig } = normalizeChartTypes({\n      config,\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n    expect(transformedConfig.type).toEqual('gouda-cheese-chart')\n  })\n})\n"],"mappings":"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"}