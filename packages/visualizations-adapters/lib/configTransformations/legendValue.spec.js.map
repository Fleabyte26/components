{"version":3,"file":"legendValue.spec.js","names":["legendValue","mockPieConfig","mockFields","mockSdkDataResponse","describe","test","config","data","fields","expect","legend","toEqual","position","type","value","label_type","undefined","transformedConfig"],"sources":["../../src/configTransformations/legendValue.spec.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { legendValue } from './legendValue'\nimport { mockPieConfig, mockFields, mockSdkDataResponse } from '../fixtures'\n\ndescribe('legendValue', () => {\n  test('default value', () => {\n    const { config } = legendValue({\n      config: { ...mockPieConfig },\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n\n    expect(config.legend).toEqual({\n      position: 'bottom',\n      type: 'legend',\n      value: 'label',\n    })\n  })\n\n  describe('config.label_type ===', () => {\n    test('lab', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'lab' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label')\n      }\n    })\n\n    test('labVal', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'labVal' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_value')\n      }\n    })\n\n    test('val', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'val' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('value')\n      }\n    })\n\n    test('per', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'per' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('percent')\n      }\n    })\n\n    test('labPer', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'labPer' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_percent')\n      }\n    })\n  })\n\n  describe('config.legend.value ===', () => {\n    test('\"label\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'label' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label')\n      }\n    })\n\n    test('\"value\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'value' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('value')\n      }\n    })\n\n    test('\"percent\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'percent' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('percent')\n      }\n    })\n\n    test('\"label_value\"', () => {\n      const config = {\n        ...mockPieConfig,\n        legend: { value: 'label_value' as const },\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_value')\n      }\n    })\n\n    test('\"label_percent\"', () => {\n      const config = {\n        ...mockPieConfig,\n        legend: { value: 'label_percent' as const },\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_percent')\n      }\n    })\n  })\n\n  test('config.legend === false', () => {\n    const config = { ...mockPieConfig, legend: false }\n    const { config: transformedConfig } = legendValue({\n      config,\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n    expect(transformedConfig.legend).toEqual(false)\n  })\n})\n"],"mappings":"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"}