{"version":3,"file":"has_user_attribute_node_without_value.js","names":["_any","_interopRequireDefault","require","_allPass","_flow","_types","_tree","obj","__esModule","isUserAttributeNode","_ref","type","TYPE_USER_ATTRIBUTE","hasNoAttributeValue","_ref2","attributeValue","hasUserAttributeNodeWithoutValue","flow","treeToList","any","allPass","exports"],"sources":["../../../src/utils/has_user_attribute_node_without_value.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport any from 'lodash/fp/any';\nimport allPass from 'lodash/fp/allPass';\nimport flow from 'lodash/fp/flow';\nimport type { FilterModel } from '../types';\nimport { TYPE_USER_ATTRIBUTE } from '../types';\nimport { treeToList } from './tree';\n\nconst isUserAttributeNode = ({ type }: FilterModel) =>\n  type === TYPE_USER_ATTRIBUTE;\n\nconst hasNoAttributeValue = ({ attributeValue }: FilterModel) =>\n  !attributeValue;\n\n/**\n * checks if the ast has:\n * - any node of type 'userAttribute'\n * - and that node has no value\n */\nexport const hasUserAttributeNodeWithoutValue = flow([\n  treeToList,\n  any(allPass([isUserAttributeNode, hasNoAttributeValue])),\n]);\n"],"mappings":";;;;;;AAIA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,KAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,KAAA,GAAAJ,OAAA;AAAoC,SAAAD,uBAAAM,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAEpC,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAAC,IAAA;EAAA,IAAMC,IAAI,GAAAD,IAAA,CAAJC,IAAI;EAAA,OACjCA,IAAI,KAAKC,0BAAmB;AAAA;AAE9B,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAAC,KAAA;EAAA,IAAMC,cAAc,GAAAD,KAAA,CAAdC,cAAc;EAAA,OAC3C,CAACA,cAAc;AAAA;AAOV,IAAMC,gCAAgC,GAAG,IAAAC,gBAAI,EAAC,CACnDC,gBAAU,EACV,IAAAC,eAAG,EAAC,IAAAC,mBAAO,EAAC,CAACX,mBAAmB,EAAEI,mBAAmB,CAAC,CAAC,CAAC,CACzD,CAAC;AAACQ,OAAA,CAAAL,gCAAA,GAAAA,gCAAA"}