{"version":3,"file":"get_expression_type.js","names":["_sdk","require","getTimeframeExpressionType","fieldType","isDateTime","some","timeString","indexOf","getExpressionTypeFromField","field","category","Category","parameter","type","enumerations","is_numeric","is_timeframe","exports","getExpressionType","filter","_filter$type","filterExpressionMap","number_filter","string_filter","date_filter","field_filter"],"sources":["../../../src/utils/get_expression_type.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { Category } from '@looker/sdk';\nimport type { IDashboardFilter, ILookmlModelExploreField } from '@looker/sdk';\nimport type { FilterExpressionType } from '../types/filter_type';\n\ninterface FilterExpressionTypeMap {\n  [type: string]: FilterExpressionType;\n}\n\nconst getTimeframeExpressionType = (fieldType?: string) => {\n  if (!fieldType) return 'date';\n\n  const isDateTime = ['date_time', 'hour', 'minute', 'second'].some(\n    (timeString: string) => {\n      return fieldType.indexOf(timeString) > -1;\n    }\n  );\n  if (isDateTime) return 'date_time';\n\n  return 'date';\n};\n\n/**\n * yields a value for the 'expressionType' prop on the Filter component\n */\nexport const getExpressionTypeFromField = (\n  field: ILookmlModelExploreField\n): FilterExpressionType => {\n  if (field?.category === Category.parameter && field?.type === 'number') {\n    // If parameter field has enumerations it always parsed as 'tier' but\n    // visually should be treated differently if number type defined in LookML\n    // bugs: b/187940941, b/199507872\n    return field.type as FilterExpressionType;\n  }\n  if (field.enumerations) {\n    return 'tier';\n  }\n  // A custom field may have type number but be missing is_numeric\n  if (field.is_numeric || field.type === 'number') {\n    return 'number';\n  }\n  // A custom field may have type date but be missing is_timeframe\n  if (field.is_timeframe || field.type === 'date') {\n    return getTimeframeExpressionType(field.type);\n  }\n  if (field.type === 'location' || field.type === 'location_bin_level') {\n    return 'location';\n  }\n  return 'string';\n};\n\n/**\n * Returns a valid filter expression type from a DashboardFilter object\n * depending if the filter is of type field or not\n */\nexport const getExpressionType = (\n  filter: Pick<IDashboardFilter, 'type' | 'field'>\n): FilterExpressionType => {\n  if (filter.field) {\n    return getExpressionTypeFromField(filter.field);\n  }\n\n  const filterExpressionMap: FilterExpressionTypeMap = {\n    number_filter: 'number',\n    string_filter: 'string',\n    date_filter: 'date',\n    // Catch for broken cases where field is not defined, display as a\n    // string filter\n    field_filter: 'string',\n  };\n  return filterExpressionMap[filter.type ?? 'field_filter'];\n};\n"],"mappings":";;;;;;AAIA,IAAAA,IAAA,GAAAC,OAAA;AAQA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0BA,CAAIC,SAAkB,EAAK;EACzD,IAAI,CAACA,SAAS,EAAE,OAAO,MAAM;EAE7B,IAAMC,UAAU,GAAG,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAACC,IAAI,CAC/D,UAACC,UAAkB,EAAK;IACtB,OAAOH,SAAS,CAACI,OAAO,CAACD,UAAU,CAAC,GAAG,CAAC,CAAC;EAC3C,CACF,CAAC;EACD,IAAIF,UAAU,EAAE,OAAO,WAAW;EAElC,OAAO,MAAM;AACf,CAAC;AAKM,IAAMI,0BAA0B,GAAG,SAA7BA,0BAA0BA,CACrCC,KAA+B,EACN;EACzB,IAAI,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,QAAQ,MAAKC,aAAQ,CAACC,SAAS,IAAI,CAAAH,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,IAAI,MAAK,QAAQ,EAAE;IAItE,OAAOJ,KAAK,CAACI,IAAI;EACnB;EACA,IAAIJ,KAAK,CAACK,YAAY,EAAE;IACtB,OAAO,MAAM;EACf;EAEA,IAAIL,KAAK,CAACM,UAAU,IAAIN,KAAK,CAACI,IAAI,KAAK,QAAQ,EAAE;IAC/C,OAAO,QAAQ;EACjB;EAEA,IAAIJ,KAAK,CAACO,YAAY,IAAIP,KAAK,CAACI,IAAI,KAAK,MAAM,EAAE;IAC/C,OAAOX,0BAA0B,CAACO,KAAK,CAACI,IAAI,CAAC;EAC/C;EACA,IAAIJ,KAAK,CAACI,IAAI,KAAK,UAAU,IAAIJ,KAAK,CAACI,IAAI,KAAK,oBAAoB,EAAE;IACpE,OAAO,UAAU;EACnB;EACA,OAAO,QAAQ;AACjB,CAAC;AAACI,OAAA,CAAAT,0BAAA,GAAAA,0BAAA;AAMK,IAAMU,iBAAiB,GAAG,SAApBA,iBAAiBA,CAC5BC,MAAgD,EACvB;EAAA,IAAAC,YAAA;EACzB,IAAID,MAAM,CAACV,KAAK,EAAE;IAChB,OAAOD,0BAA0B,CAACW,MAAM,CAACV,KAAK,CAAC;EACjD;EAEA,IAAMY,mBAA4C,GAAG;IACnDC,aAAa,EAAE,QAAQ;IACvBC,aAAa,EAAE,QAAQ;IACvBC,WAAW,EAAE,MAAM;IAGnBC,YAAY,EAAE;EAChB,CAAC;EACD,OAAOJ,mBAAmB,EAAAD,YAAA,GAACD,MAAM,CAACN,IAAI,cAAAO,YAAA,cAAAA,YAAA,GAAI,cAAc,CAAC;AAC3D,CAAC;AAACH,OAAA,CAAAC,iBAAA,GAAAA,iBAAA"}