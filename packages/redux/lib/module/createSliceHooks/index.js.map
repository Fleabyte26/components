{"version":3,"file":"index.js","names":["useActions","useStoreState","createSliceHooks","slice","saga","setupSlice","store","addSaga","addReducer","name","reducer"],"sources":["../../../src/createSliceHooks/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CaseReducerActions, Slice } from '@reduxjs/toolkit'\nimport type { Saga } from 'redux-saga'\nimport { useActions } from '../useActions'\nimport { useStoreState } from '../useStoreState'\n\ntype ExtractReducer<T> = T extends Slice<any, infer R> ? R : never\ntype ExtractState<T> = T extends Slice<infer S, any> ? S : never\n\n/**\n * Returns hooks that are automatically bound to your typed state, slices and sagas.\n *\n * @param slice The slice containing reducers to register on the nearest store.\n * @param saga The saga to register on the nearest store.\n */\nexport const createSliceHooks = <T extends Slice>(slice: T, saga?: Saga) => ({\n  useActions: (): CaseReducerActions<ExtractReducer<T>> => {\n    return useActions(slice)\n  },\n  useStoreState: () => {\n    return useStoreState<ExtractState<T>>(slice, saga)\n  },\n})\n\nexport const setupSlice = <T extends Slice>({\n  store,\n  slice,\n  saga,\n}: {\n  store: any\n  slice: T\n  saga?: Saga\n}) => {\n  if (saga) {\n    store.addSaga(saga)\n  }\n  store.addReducer(slice.name, slice.reducer)\n}\n"],"mappings":";;AAOA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,aAAa,QAAQ,kBAAkB;AAWhD,OAAO,MAAMC,gBAAgB,GAAG,CAAkBC,KAAQ,EAAEC,IAAW,MAAM;EAC3EJ,UAAU,EAAE,MAA6C;IACvD,OAAOA,UAAU,CAACG,KAAK,CAAC;EAC1B,CAAC;EACDF,aAAa,EAAE,MAAM;IACnB,OAAOA,aAAa,CAAkBE,KAAK,EAAEC,IAAI,CAAC;EACpD;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG,CAAkB;EAC1CC,KAAK;EACLH,KAAK;EACLC;AAKF,CAAC,KAAK;EACJ,IAAIA,IAAI,EAAE;IACRE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC;EACrB;EACAE,KAAK,CAACE,UAAU,CAACL,KAAK,CAACM,IAAI,EAAEN,KAAK,CAACO,OAAO,CAAC;AAC7C,CAAC"}