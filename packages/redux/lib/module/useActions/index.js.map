{"version":3,"file":"index.js","names":["bindActionCreators","useDispatch","dispatchMap","WeakMap","useActions","slice","dispatch","has","set","boundActionCreatorsMap","get","actions"],"sources":["../../../src/useActions/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Slice } from '@reduxjs/toolkit'\nimport { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\n\nconst dispatchMap = new WeakMap()\n\n/**\n * Binds a slice's action creators to dispatch().\n *\n * @param slice The slice who's actions we will pass to bindActionCreators.\n */\nexport const useActions = (slice: Slice) => {\n  const dispatch = useDispatch()\n\n  // We must keep record of which bound action creators belong to which\n  // dispatch instance so that if a new store instance is created (i.e. tests)\n  // they get rebound and stored.\n  if (!dispatchMap.has(dispatch)) {\n    dispatchMap.set(dispatch, new WeakMap())\n  }\n\n  const boundActionCreatorsMap = dispatchMap.get(dispatch)\n\n  if (!boundActionCreatorsMap.has(slice)) {\n    boundActionCreatorsMap.set(\n      slice,\n      bindActionCreators(slice.actions, dispatch)\n    )\n  }\n\n  return boundActionCreatorsMap.get(slice)\n}\n"],"mappings":";;AAMA,SAASA,kBAAkB,QAAQ,OAAO;AAC1C,SAASC,WAAW,QAAQ,aAAa;AAEzC,MAAMC,WAAW,GAAG,IAAIC,OAAO,EAAE;;AAOjC,OAAO,MAAMC,UAAU,GAAIC,KAAY,IAAK;EAC1C,MAAMC,QAAQ,GAAGL,WAAW,EAAE;;EAK9B,IAAI,CAACC,WAAW,CAACK,GAAG,CAACD,QAAQ,CAAC,EAAE;IAC9BJ,WAAW,CAACM,GAAG,CAACF,QAAQ,EAAE,IAAIH,OAAO,EAAE,CAAC;EAC1C;EAEA,MAAMM,sBAAsB,GAAGP,WAAW,CAACQ,GAAG,CAACJ,QAAQ,CAAC;EAExD,IAAI,CAACG,sBAAsB,CAACF,GAAG,CAACF,KAAK,CAAC,EAAE;IACtCI,sBAAsB,CAACD,GAAG,CACxBH,KAAK,EACLL,kBAAkB,CAACK,KAAK,CAACM,OAAO,EAAEL,QAAQ,CAAC,CAC5C;EACH;EAEA,OAAOG,sBAAsB,CAACC,GAAG,CAACL,KAAK,CAAC;AAC1C,CAAC"}