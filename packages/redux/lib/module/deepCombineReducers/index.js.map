{"version":3,"file":"index.js","names":["deepCombineReducers","reducers","reducerKeys","Object","keys","length","combination","state","action","nextState","i","key","reducer","previousStateForKey","nextStateForKey"],"sources":["../../../src/deepCombineReducers/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Reducer, ReducersMapObject, AnyAction, Action } from 'redux'\n\nexport type DeepReducersMapObject<S = any, A extends Action = AnyAction> = {\n  [K in keyof S]: Reducer<S[K], A> | DeepReducersMapObject<S[K]>\n}\n\n// We use many action types throughout helltool that are not\n// all the same type.   Ideally this would default to AnyAction\n// rather than Any.   Before trying to engineer these action types\n// to be more type safe, consider looking at existing solutions such as\n// the typescript-fsa library.\ntype HelltoolActionType = any\n\n/**\n * Same function as combineReducers from react-redux with the additional functionality\n * of being able to combine nested reducers.\n * @example\n * const reducer = deepCombineReducers({\n *   foo: fooReducer\n *   bar: {\n *     nestedBar: nestedBarReducer\n *   }\n * })\n */\nexport const deepCombineReducers = <S>(\n  reducers:\n    | DeepReducersMapObject<S, HelltoolActionType>\n    | Reducer<S, HelltoolActionType>\n): Reducer<S, HelltoolActionType> => {\n  // the majority of this implementation is copy pasted from redux\n  // https://github.com/reduxjs/redux/blob/master/src/combineReducers.ts\n  const reducerKeys = Object.keys(reducers)\n\n  if (!reducerKeys.length) {\n    return reducers as Reducer\n  }\n\n  return function combination(state: S = {} as S, action: HelltoolActionType) {\n    const nextState: S = { ...state }\n    // Most of this function is copy pasted from redux.  They might be doing a loop like this\n    // for performance reasons.\n    for (let i = 0; i < reducerKeys.length; i++) {\n      const key = reducerKeys[i] as keyof S\n      const reducer = deepCombineReducers((reducers as ReducersMapObject)[key])\n      const previousStateForKey = nextState[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      nextState[key] = nextStateForKey\n    }\n    return typeof reducers === 'function'\n      ? reducers(nextState, action)\n      : nextState\n  }\n}\n"],"mappings":";;;;AA6BA,OAAO,MAAMA,mBAAmB,GAC9BC,QAEkC,IACC;EAGnC,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC;EAEzC,IAAI,CAACC,WAAW,CAACG,MAAM,EAAE;IACvB,OAAOJ,QAAQ;EACjB;EAEA,OAAO,SAASK,WAAW,CAACC,KAAQ,GAAG,CAAC,CAAM,EAAEC,MAA0B,EAAE;IAC1E,MAAMC,SAAY,qBAAQF,KAAK,CAAE;IAGjC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,WAAW,CAACG,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC3C,MAAMC,GAAG,GAAGT,WAAW,CAACQ,CAAC,CAAY;MACrC,MAAME,OAAO,GAAGZ,mBAAmB,CAAEC,QAAQ,CAAuBU,GAAG,CAAC,CAAC;MACzE,MAAME,mBAAmB,GAAGJ,SAAS,CAACE,GAAG,CAAC;MAC1C,MAAMG,eAAe,GAAGF,OAAO,CAACC,mBAAmB,EAAEL,MAAM,CAAC;MAC5DC,SAAS,CAACE,GAAG,CAAC,GAAGG,eAAe;IAClC;IACA,OAAO,OAAOb,QAAQ,KAAK,UAAU,GACjCA,QAAQ,CAACQ,SAAS,EAAED,MAAM,CAAC,GAC3BC,SAAS;EACf,CAAC;AACH,CAAC"}