{"version":3,"file":"index.js","names":["configureStore","createSagaMiddleware","set","deepCombineReducers","createStore","devTools","middleware","preloadedState","reducer","_","state","currentReducers","reducerSet","WeakSet","sagasSet","sagaMiddleware","store","process","env","NODE_ENV","addReducer","path","has","add","replaceReducer","addSaga","saga","run"],"sources":["../../../src/createStore/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type {\n  ConfigureStoreOptions,\n  Middleware,\n  ReducersMapObject,\n} from '@reduxjs/toolkit'\nimport { configureStore } from '@reduxjs/toolkit'\n// @ts-ignore - this causes compile issues because it doesn't have types.\nimport createSagaMiddleware from 'redux-saga'\nimport type { Store } from '../types'\nimport set from 'lodash/set'\nimport { deepCombineReducers } from '../deepCombineReducers'\n\nexport interface CreateStoreOptions<State>\n  extends Partial<ConfigureStoreOptions<State>> {\n  middleware?: Middleware[]\n  reducer?: ReducersMapObject<State>\n}\n\n/**\n * Creates a store that is pre-configured for Looker usage and is enhanced to dynamically add reducers and sagas.\n *\n * @param preloadedState The initial state to preload into the store.\n * @param reducer The initial reducer that goes along with initial state.\n */\nexport const createStore = <State>({\n  devTools = false,\n  middleware = [],\n  preloadedState = {} as any,\n  reducer = {\n    // If no reducer is provided initially we\n    // must start with at least one reducer\n    _: (state: State) => state ?? null,\n    // cast as unknown because _ doesn't exist on State\n  } as unknown as ReducersMapObject<State>,\n}: CreateStoreOptions<State> = {}): Store<State> => {\n  const currentReducers = {\n    ...reducer,\n  }\n  const reducerSet = new WeakSet()\n  const sagasSet = new WeakSet()\n  const sagaMiddleware = createSagaMiddleware()\n  const store = configureStore({\n    devTools: process.env.NODE_ENV !== 'production' || devTools,\n    middleware: [sagaMiddleware, ...middleware],\n    reducer: currentReducers,\n    preloadedState: preloadedState as any,\n  }) as Store<State>\n\n  // Dynamically adds a reducer to the store if it has not been added yet.\n  store.addReducer = (path, reducer) => {\n    if (!reducerSet.has(reducer)) {\n      reducerSet.add(reducer)\n      set(currentReducers, path, reducer)\n      store.replaceReducer(deepCombineReducers(currentReducers))\n    }\n  }\n\n  // Dynamically adds a saga to the store if it has not been added yet.\n  store.addSaga = saga => {\n    if (!sagasSet.has(saga)) {\n      sagasSet.add(saga)\n      sagaMiddleware.run(saga)\n    }\n  }\n\n  return store\n}\n"],"mappings":";;;;AAUA,SAASA,cAAc,QAAQ,kBAAkB;AAEjD,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,mBAAmB,QAAQ,wBAAwB;AAc5D,OAAO,MAAMC,WAAW,GAAG,CAAQ;EACjCC,QAAQ,EAARA,SAAQ,GAAG,KAAK;EAChBC,UAAU,EAAVA,WAAU,GAAG,EAAE;EACfC,cAAc,EAAdA,eAAc,GAAG,CAAC,CAAQ;EAC1BC,OAAO,EAAPA,QAAO,GAAG;IAGRC,CAAC,EAAGC,KAAY,IAAKA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI;EAEhC;AACyB,CAAC,GAAG,CAAC,CAAC,KAAmB;EAClD,MAAMC,eAAe,qBAChBH,QAAO,CACX;EACD,MAAMI,UAAU,GAAG,IAAIC,OAAO,EAAE;EAChC,MAAMC,QAAQ,GAAG,IAAID,OAAO,EAAE;EAC9B,MAAME,cAAc,GAAGd,oBAAoB,EAAE;EAC7C,MAAMe,KAAK,GAAGhB,cAAc,CAAC;IAC3BK,QAAQ,EAAEY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAId,SAAQ;IAC3DC,UAAU,EAAE,CAACS,cAAc,EAAE,GAAGT,WAAU,CAAC;IAC3CE,OAAO,EAAEG,eAAe;IACxBJ,cAAc,EAAEA;EAClB,CAAC,CAAiB;;EAGlBS,KAAK,CAACI,UAAU,GAAG,CAACC,IAAI,EAAEb,OAAO,KAAK;IACpC,IAAI,CAACI,UAAU,CAACU,GAAG,CAACd,OAAO,CAAC,EAAE;MAC5BI,UAAU,CAACW,GAAG,CAACf,OAAO,CAAC;MACvBN,GAAG,CAACS,eAAe,EAAEU,IAAI,EAAEb,OAAO,CAAC;MACnCQ,KAAK,CAACQ,cAAc,CAACrB,mBAAmB,CAACQ,eAAe,CAAC,CAAC;IAC5D;EACF,CAAC;;EAGDK,KAAK,CAACS,OAAO,GAAGC,IAAI,IAAI;IACtB,IAAI,CAACZ,QAAQ,CAACQ,GAAG,CAACI,IAAI,CAAC,EAAE;MACvBZ,QAAQ,CAACS,GAAG,CAACG,IAAI,CAAC;MAClBX,cAAc,CAACY,GAAG,CAACD,IAAI,CAAC;IAC1B;EACF,CAAC;EAED,OAAOV,KAAK;AACd,CAAC"}