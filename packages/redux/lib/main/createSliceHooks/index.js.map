{"version":3,"file":"index.js","names":["createSliceHooks","slice","saga","useActions","useStoreState","setupSlice","store","addSaga","addReducer","name","reducer"],"sources":["../../../src/createSliceHooks/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CaseReducerActions, Slice } from '@reduxjs/toolkit'\nimport type { Saga } from 'redux-saga'\nimport { useActions } from '../useActions'\nimport { useStoreState } from '../useStoreState'\n\ntype ExtractReducer<T> = T extends Slice<any, infer R> ? R : never\ntype ExtractState<T> = T extends Slice<infer S, any> ? S : never\n\n/**\n * Returns hooks that are automatically bound to your typed state, slices and sagas.\n *\n * @param slice The slice containing reducers to register on the nearest store.\n * @param saga The saga to register on the nearest store.\n */\nexport const createSliceHooks = <T extends Slice>(slice: T, saga?: Saga) => ({\n  useActions: (): CaseReducerActions<ExtractReducer<T>> => {\n    return useActions(slice)\n  },\n  useStoreState: () => {\n    return useStoreState<ExtractState<T>>(slice, saga)\n  },\n})\n\nexport const setupSlice = <T extends Slice>({\n  store,\n  slice,\n  saga,\n}: {\n  store: any\n  slice: T\n  saga?: Saga\n}) => {\n  if (saga) {\n    store.addSaga(saga)\n  }\n  store.addReducer(slice.name, slice.reducer)\n}\n"],"mappings":";;;;;;AAOA;AACA;;AAWO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAqBC,KAAQ,EAAEC,IAAW;EAAA,OAAM;IAC3EC,UAAU,EAAE,sBAA6C;MACvD,OAAO,IAAAA,uBAAU,EAACF,KAAK,CAAC;IAC1B,CAAC;IACDG,aAAa,EAAE,yBAAM;MACnB,OAAO,IAAAA,6BAAa,EAAkBH,KAAK,EAAEC,IAAI,CAAC;IACpD;EACF,CAAC;AAAA,CAAC;AAAA;AAEK,IAAMG,UAAU,GAAG,SAAbA,UAAU,OAQjB;EAAA,IAPJC,KAAK,QAALA,KAAK;IACLL,KAAK,QAALA,KAAK;IACLC,IAAI,QAAJA,IAAI;EAMJ,IAAIA,IAAI,EAAE;IACRI,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC;EACrB;EACAI,KAAK,CAACE,UAAU,CAACP,KAAK,CAACQ,IAAI,EAAER,KAAK,CAACS,OAAO,CAAC;AAC7C,CAAC;AAAA"}