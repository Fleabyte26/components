{"version":3,"file":"index.js","names":["dispatchMap","WeakMap","useActions","slice","dispatch","useDispatch","has","set","boundActionCreatorsMap","get","bindActionCreators","actions"],"sources":["../../../src/useActions/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Slice } from '@reduxjs/toolkit'\nimport { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\n\nconst dispatchMap = new WeakMap()\n\n/**\n * Binds a slice's action creators to dispatch().\n *\n * @param slice The slice who's actions we will pass to bindActionCreators.\n */\nexport const useActions = (slice: Slice) => {\n  const dispatch = useDispatch()\n\n  // We must keep record of which bound action creators belong to which\n  // dispatch instance so that if a new store instance is created (i.e. tests)\n  // they get rebound and stored.\n  if (!dispatchMap.has(dispatch)) {\n    dispatchMap.set(dispatch, new WeakMap())\n  }\n\n  const boundActionCreatorsMap = dispatchMap.get(dispatch)\n\n  if (!boundActionCreatorsMap.has(slice)) {\n    boundActionCreatorsMap.set(\n      slice,\n      bindActionCreators(slice.actions, dispatch)\n    )\n  }\n\n  return boundActionCreatorsMap.get(slice)\n}\n"],"mappings":";;;;;;AAMA;AACA;;AAEA,IAAMA,WAAW,GAAG,IAAIC,OAAO,EAAE;;AAO1B,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAY,EAAK;EAC1C,IAAMC,QAAQ,GAAG,IAAAC,uBAAW,GAAE;;EAK9B,IAAI,CAACL,WAAW,CAACM,GAAG,CAACF,QAAQ,CAAC,EAAE;IAC9BJ,WAAW,CAACO,GAAG,CAACH,QAAQ,EAAE,IAAIH,OAAO,EAAE,CAAC;EAC1C;EAEA,IAAMO,sBAAsB,GAAGR,WAAW,CAACS,GAAG,CAACL,QAAQ,CAAC;EAExD,IAAI,CAACI,sBAAsB,CAACF,GAAG,CAACH,KAAK,CAAC,EAAE;IACtCK,sBAAsB,CAACD,GAAG,CACxBJ,KAAK,EACL,IAAAO,yBAAkB,EAACP,KAAK,CAACQ,OAAO,EAAEP,QAAQ,CAAC,CAC5C;EACH;EAEA,OAAOI,sBAAsB,CAACC,GAAG,CAACN,KAAK,CAAC;AAC1C,CAAC;AAAA"}