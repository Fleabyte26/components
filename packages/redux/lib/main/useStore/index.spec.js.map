{"version":3,"file":"index.spec.js","names":["jest","mock","useStore","fn","mockStore","addReducer","addSaga","replaceReducer","beforeEach","useStoreReactRedux","mockReset","mockReturnValue","test","res","renderHook","expect","toHaveBeenCalledTimes","result","current","toBeDefined"],"sources":["../../../src/useStore/index.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { renderHook } from '@testing-library/react-hooks'\nimport { useStore as useStoreReactRedux } from 'react-redux'\nimport { useStore } from '.'\n\njest.mock('react-redux', () => ({\n  useStore: jest.fn(),\n}))\n\nconst mockStore = {\n  addReducer: () => {},\n  addSaga: () => {},\n  replaceReducer: () => {},\n}\n\nbeforeEach(() => {\n  ;(useStoreReactRedux as jest.Mock).mockReset().mockReturnValue(mockStore)\n})\n\ntest('calls useStore and returns a store with correct typescript type', () => {\n  const res = renderHook(() => useStore())\n  expect(useStoreReactRedux).toHaveBeenCalledTimes(1)\n  // expect redux toolkit type to compile\n  expect(res.result.current.replaceReducer).toBeDefined()\n  // expect our custom types to compile\n  expect(res.result.current.addReducer).toBeDefined()\n  expect(res.result.current.addSaga).toBeDefined()\n})\n"],"mappings":";;AAKA;AACA;AACA;;AAEAA,IAAI,CAACC,IAAI,CAAC,aAAa,EAAE;EAAA,OAAO;IAC9BC,QAAQ,EAAEF,IAAI,CAACG,EAAE;EACnB,CAAC;AAAA,CAAC,CAAC;AAEH,IAAMC,SAAS,GAAG;EAChBC,UAAU,EAAE,sBAAM,CAAC,CAAC;EACpBC,OAAO,EAAE,mBAAM,CAAC,CAAC;EACjBC,cAAc,EAAE,0BAAM,CAAC;AACzB,CAAC;AAEDC,UAAU,CAAC,YAAM;EACf;EAAEC,oBAAkB,CAAeC,SAAS,EAAE,CAACC,eAAe,CAACP,SAAS,CAAC;AAC3E,CAAC,CAAC;AAEFQ,IAAI,CAAC,iEAAiE,EAAE,YAAM;EAC5E,IAAMC,GAAG,GAAG,IAAAC,sBAAU,EAAC;IAAA,OAAM,IAAAZ,UAAQ,GAAE;EAAA,EAAC;EACxCa,MAAM,CAACN,oBAAkB,CAAC,CAACO,qBAAqB,CAAC,CAAC,CAAC;EAEnDD,MAAM,CAACF,GAAG,CAACI,MAAM,CAACC,OAAO,CAACX,cAAc,CAAC,CAACY,WAAW,EAAE;EAEvDJ,MAAM,CAACF,GAAG,CAACI,MAAM,CAACC,OAAO,CAACb,UAAU,CAAC,CAACc,WAAW,EAAE;EACnDJ,MAAM,CAACF,GAAG,CAACI,MAAM,CAACC,OAAO,CAACZ,OAAO,CAAC,CAACa,WAAW,EAAE;AAClD,CAAC,CAAC"}