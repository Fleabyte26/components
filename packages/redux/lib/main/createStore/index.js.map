{"version":3,"file":"index.js","names":["createStore","devTools","middleware","preloadedState","reducer","_","state","currentReducers","reducerSet","WeakSet","sagasSet","sagaMiddleware","createSagaMiddleware","store","configureStore","process","env","NODE_ENV","addReducer","path","has","add","set","replaceReducer","deepCombineReducers","addSaga","saga","run"],"sources":["../../../src/createStore/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type {\n  ConfigureStoreOptions,\n  Middleware,\n  ReducersMapObject,\n} from '@reduxjs/toolkit'\nimport { configureStore } from '@reduxjs/toolkit'\n// @ts-ignore - this causes compile issues because it doesn't have types.\nimport createSagaMiddleware from 'redux-saga'\nimport type { Store } from '../types'\nimport set from 'lodash/set'\nimport { deepCombineReducers } from '../deepCombineReducers'\n\nexport interface CreateStoreOptions<State>\n  extends Partial<ConfigureStoreOptions<State>> {\n  middleware?: Middleware[]\n  reducer?: ReducersMapObject<State>\n}\n\n/**\n * Creates a store that is pre-configured for Looker usage and is enhanced to dynamically add reducers and sagas.\n *\n * @param preloadedState The initial state to preload into the store.\n * @param reducer The initial reducer that goes along with initial state.\n */\nexport const createStore = <State>({\n  devTools = false,\n  middleware = [],\n  preloadedState = {} as any,\n  reducer = {\n    // If no reducer is provided initially we\n    // must start with at least one reducer\n    _: (state: State) => state ?? null,\n    // cast as unknown because _ doesn't exist on State\n  } as unknown as ReducersMapObject<State>,\n}: CreateStoreOptions<State> = {}): Store<State> => {\n  const currentReducers = {\n    ...reducer,\n  }\n  const reducerSet = new WeakSet()\n  const sagasSet = new WeakSet()\n  const sagaMiddleware = createSagaMiddleware()\n  const store = configureStore({\n    devTools: process.env.NODE_ENV !== 'production' || devTools,\n    middleware: [sagaMiddleware, ...middleware],\n    reducer: currentReducers,\n    preloadedState: preloadedState as any,\n  }) as Store<State>\n\n  // Dynamically adds a reducer to the store if it has not been added yet.\n  store.addReducer = (path, reducer) => {\n    if (!reducerSet.has(reducer)) {\n      reducerSet.add(reducer)\n      set(currentReducers, path, reducer)\n      store.replaceReducer(deepCombineReducers(currentReducers))\n    }\n  }\n\n  // Dynamically adds a saga to the store if it has not been added yet.\n  store.addSaga = saga => {\n    if (!sagasSet.has(saga)) {\n      sagasSet.add(saga)\n      sagaMiddleware.run(saga)\n    }\n  }\n\n  return store\n}\n"],"mappings":";;;;;;;;;AAUA;AAEA;AAEA;AACA;AAA4D;AAAA;AAcrD,IAAMA,WAAW,GAAG,SAAdA,WAAW,GAU4B;EAAA,+EAArB,CAAC,CAAC;IAAA,qBAT/BC,QAAQ;IAARA,QAAQ,8BAAG,KAAK;IAAA,uBAChBC,UAAU;IAAVA,UAAU,gCAAG,EAAE;IAAA,2BACfC,cAAc;IAAdA,cAAc,oCAAG,CAAC,CAAC;IAAA,oBACnBC,OAAO;IAAPA,OAAO,6BAAG;MAGRC,CAAC,EAAE,WAACC,KAAY;QAAA,OAAKA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,IAAI;MAAA;IAEpC,CAAC;EAED,IAAMC,eAAe,qBAChBH,OAAO,CACX;EACD,IAAMI,UAAU,GAAG,IAAIC,OAAO,EAAE;EAChC,IAAMC,QAAQ,GAAG,IAAID,OAAO,EAAE;EAC9B,IAAME,cAAc,GAAG,IAAAC,qBAAoB,GAAE;EAC7C,IAAMC,KAAK,GAAG,IAAAC,uBAAc,EAAC;IAC3Bb,QAAQ,EAAEc,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIhB,QAAQ;IAC3DC,UAAU,GAAGS,cAAc,6CAAKT,UAAU,EAAC;IAC3CE,OAAO,EAAEG,eAAe;IACxBJ,cAAc,EAAEA;EAClB,CAAC,CAAiB;;EAGlBU,KAAK,CAACK,UAAU,GAAG,UAACC,IAAI,EAAEf,OAAO,EAAK;IACpC,IAAI,CAACI,UAAU,CAACY,GAAG,CAAChB,OAAO,CAAC,EAAE;MAC5BI,UAAU,CAACa,GAAG,CAACjB,OAAO,CAAC;MACvB,IAAAkB,eAAG,EAACf,eAAe,EAAEY,IAAI,EAAEf,OAAO,CAAC;MACnCS,KAAK,CAACU,cAAc,CAAC,IAAAC,wCAAmB,EAACjB,eAAe,CAAC,CAAC;IAC5D;EACF,CAAC;;EAGDM,KAAK,CAACY,OAAO,GAAG,UAAAC,IAAI,EAAI;IACtB,IAAI,CAAChB,QAAQ,CAACU,GAAG,CAACM,IAAI,CAAC,EAAE;MACvBhB,QAAQ,CAACW,GAAG,CAACK,IAAI,CAAC;MAClBf,cAAc,CAACgB,GAAG,CAACD,IAAI,CAAC;IAC1B;EACF,CAAC;EAED,OAAOb,KAAK;AACd,CAAC;AAAA"}